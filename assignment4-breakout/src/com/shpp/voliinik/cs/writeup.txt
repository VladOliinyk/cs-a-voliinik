Начал писать файл, но в процессе написания понял, что лучше кое-какие объекты стоит убрать
с полочки "глобальные", и перенести инициализацию в нужные методы. 
Исправлять первоначальный список глобальных объектов не стал, 
(лишь добавил пометку, что имеено я убрал)


1. При обсуждении переменных, которые находятся в скоупе самого класса (переменные-поля), 
мы подчеркнули, что они должны быть "последним средством" для обменна данными в программе. 
Почти всегда предпочтительно использовать параметры, которые передаются в функцию и возращаются ею. 
Для каждого поля в программе объясните почему вы выбрали создать ее не-локально. 
(константы не считаются переменными инстанса, поэтому ну нужно описывать константы тут)

Переменные данные в "стартовом коде" не трогал.

|01|    GRect paddle;
|02|    GOval ball;
|03|    RandomGenerator rgen = RandomGenerator.getInstance(); | убрал из глобальных 
|04|    private double vx = 2.0, vy = 0;
|05|    int PAUSE_TIME = 1000 / 120;
|06|    private int colorCounter = 0; | убрал из глобальных 
|07|    private int LIFE = NTURNS;
|08|    private int BRICK_COUNTER = NBRICK_ROWS * NBRICKS_PER_ROW;
|09|	JSlider diffSlider = new JSlider(1, 5, 1);

|01|    GRect paddle;
	Paddle решил сделать глоабьным т.к. считаю, что совершенно неумесно таскать его по всему "дереву" 
	функций в которых он искользуется. Но вообще, мне кажется довольно сложно было бы (если вообще реально) реализовать 
	взаимодействие ракетки с мышкой не будь она глобальная.

	Ракетка - одна из двух основных "вещей" в программе. 
	Используется в 4х методах.
 
|02|    GOval ball;
	Та же ситуация как и с paddle. Мяч нам нужен во многих местах, "сразу" и не локально. 
	С такой глобальной переменной очень прятно работать т.к. в любом мсте программы можно узнать 
	положение мяча, и относительно этого что-то делать. Что именно? Вопрос хороший. 

	Мячик - второй из двух основных "вещей" в программе. 
	Используется в 6ти методах.

|03|    RandomGenerator rgen = RandomGenerator.getInstance();
	Генератор случайных чисел так же может понадобится везде. 
	update: понял, что нафиг ему не надо быть глобальным, перенес. 

|04|    private double vx = 2.0, vy = 0;
	Честно - не знаю почему решил использовать их глобально. 
	Но интуитивно отталкивался от той мысли, что в будущем планирую добавить в игру
	немного хардкора и постепенно увеличивать скорость движения шарика (vy)
	(что в базовой Breakout.java у меня частично реализовано).
	В таком случае намного удобнее будет работать с глобальными переменными.

	vx в свою очередь тоже нужно менять (что в базовой Breakout.java у меня реализовано)
	скорость горизонтального движения шарика (вектор отскока от ракетки).

|05|    int PAUSE_TIME = 1000 / 60;
	Задержка "кадров". Думаю что в любом случае просто необходимо, что бы она была глобальной.

|06|    private int colorCounter = 0; 
	Понял что не нужно этому счетчику быть глобальным. Убрал в нужный метод его. 
	Счетчик создан для управление цветовой палитрой рядов кирпичей.

|07|    private int LIFE = NTURNS;
	Динамическая переменная - количество жизней. 
	1. Уменьшаю ее кадый раз при "проигрыше раунда".
	2. Использую ее как условие для определения "играть ли дальше".
	Соответственно считаю что с локальными переменными я бы тут не справился.

|08|    private int BRICK_COUNTER = NBRICK_ROWS * NBRICKS_PER_ROW;
	Аналогичная ситуация как и с LIFE. 
	1. Уменьшаяю кол-во кирпичей при сбитии их шаром.
	2. Использую переменную как условие для "играть и дальше".
	Аналогично считаю что с локальными переменными я бы тут не справился.

|09|	JSlider diffSlider = new JSlider(1, 5, 1);
	Слайдер с которого считываю значение и на его основе выставляю скорость шара.
	Глобальный должен быть, как ни крути. 



2. Игра заканчивается либо когда пользователь теряет три шара, либо когда все кирпичи разбиты. 
Как вы проверяете окончание игры в этом втором случае? Делали ли вы изменения в коде при тестировании?

	Определяю посредству глобального счетчика BRICK_COUNTER который изначально был равен
	NBRICK_ROWS * NBRICKS_PER_ROW - количеству кирпичей всего. 
	При разбитии одного кирпича декрементирую счетчик. 

	Счетчик служит условием цикла while: "играть ли дальше". 
	Так же счетчик служит условием для if`а который рисует победный экран 
	в случае если больше не осталось кирпичей.

	Правок не вносил. Изначально была идея глобального счетчика. 